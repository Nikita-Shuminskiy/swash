import {action, makeObservable, observable} from 'mobx';import {LoadingEnum, NotificationType} from "../types/types";export class NotificationStore {    isLoading: LoadingEnum = LoadingEnum.initial;    notification: NotificationType | undefined = undefined;    switcherNotification = false;    serverResponseText: string | undefined = '';    setIsLoading = (isLoading: LoadingEnum): void => {        this.isLoading = isLoading;    };    setServerErrorText = (text: string): void => {        this.serverResponseText = text;    };    setNotification = (        notification: NotificationType | undefined,        switcherNotification: boolean,        serverResponse: string | undefined,    ): void => {        this.switcherNotification = switcherNotification;        this.notification = notification;        this.serverResponseText = serverResponse;        if (serverResponse) {           /* createAlert({                title: 'Сообщение',                message: serverResponse ?? 'Нестабильная поделючение к интернетом, попробуйте позже',                buttons: [{text: 'Продолжить', style: "cancel"}]            })*/        }    };    constructor() {        makeObservable(this, {            isLoading: observable,            notification: observable,            switcherNotification: observable,            serverResponseText: observable,            setIsLoading: action,            setNotification: action,        });    }}export default new NotificationStore();