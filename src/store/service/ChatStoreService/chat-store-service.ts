import RootStore from '../../RootStore'import { LoadingEnum } from '../../types/types'import { SendMessagePayloadType } from '../../../api/ChatApi/type'export class ChatStoreService {	rootStore: typeof RootStore	constructor(rootStore: typeof RootStore) {		this.rootStore = rootStore	}	async getDialog(): Promise<any | void> {		this.rootStore.Notification.setLocalLoading(LoadingEnum.fetching)		try {			const data = await this.rootStore.ChatStore.getDialog()		} catch (e) {			console.log(e, 'getDialog')		} finally {			this.rootStore.Notification.setLocalLoading(LoadingEnum.success)		}	}	async sendMessage(payload: SendMessagePayloadType): Promise<any | void> {		this.rootStore.Notification.setLocalLoading(LoadingEnum.fetching)		try {			const data = await this.rootStore.ChatStore.sendMessage(payload)		} catch (e) {			console.log(e, 'sendMessage')		} finally {			this.rootStore.Notification.setLocalLoading(LoadingEnum.success)		}	}	async getPushMessages(): Promise<any | void> {		this.rootStore.Notification.setLocalLoading(LoadingEnum.fetching)		try {			const data = await this.rootStore.ChatStore.getPushMessages()		} catch (e) {			console.log(e, 'getPushMessages')		} finally {			this.rootStore.Notification.setLocalLoading(LoadingEnum.success)		}	}	async sendMessageRead(message_id: string): Promise<any | void> {		this.rootStore.Notification.setLocalLoading(LoadingEnum.fetching)		try {			const data = await this.rootStore.ChatStore.sendMessageRead(message_id)		} catch (e) {			console.log(e, 'sendMessageRead')		} finally {			this.rootStore.Notification.setLocalLoading(LoadingEnum.success)		}	}}export default ChatStoreService